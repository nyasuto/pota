name: CI

permissions:
  security-events: write
  contents: read
  actions: read

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  # Allow manual workflow dispatch for testing
  workflow_dispatch:

env:
  # Global environment variables
  GO_VERSION: 'stable'
  BUN_VERSION: 'latest'

jobs:
  # Security and dependency scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Frontend testing and validation
  frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Get Bun cache directory
        id: bun-cache-dir
        run: echo "dir=$(bun cache dir)" >> $GITHUB_OUTPUT

      - name: Cache Bun dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.bun-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-bun-${{ hashFiles('**/bun.lockb') }}
          restore-keys: |
            ${{ runner.os }}-bun-

      - name: Install dependencies
        run: bun install --frozen-lockfile

      - name: Type check
        run: |
          if [ -f "package.json" ] && bun run --silent type-check 2>/dev/null; then
            bun run type-check
          else
            echo "Running TypeScript compiler directly..."
            bunx tsc --noEmit
          fi

      - name: Lint
        run: |
          if [ -f "package.json" ] && bun run --silent lint 2>/dev/null; then
            bun run lint
          else
            echo "ESLint script not found, skipping..."
          fi

      - name: Build
        run: bun run build

      - name: Test
        run: |
          if [ -f "package.json" ] && bun run --silent test 2>/dev/null; then
            bun test
          else
            echo "No tests configured yet, skipping..."
          fi

      # Upload build artifacts for debugging
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: frontend-build-artifacts
          path: |
            frontend/.next/
            frontend/dist/
          retention-days: 7

  # Backend testing and validation
  backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Verify dependencies
        run: |
          # Skip verification for local modules (replace directives)
          if grep -q "replace.*=>" go.mod; then
            echo "⚠️  Local modules detected, skipping go mod verify"
            echo "Local replace directives found:"
            grep "replace.*=>" go.mod
          else
            go mod verify
            echo "✅ All dependencies verified"
          fi

      - name: Run go vet
        run: go vet ./...

      - name: Run go fmt check
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "❌ Go code is not properly formatted:"
            gofmt -s -l .
            echo ""
            echo "Run 'go fmt ./...' to fix formatting issues"
            exit 1
          else
            echo "✅ Go code is properly formatted"
          fi

      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v4
        with:
          version: latest
          working-directory: ./backend
          args: --timeout=5m

      - name: Build
        run: go build -v ./...

      - name: Test with coverage
        run: |
          if [ -n "$(find . -name '*_test.go')" ]; then
            go test -v -race -coverprofile=coverage.out -covermode=atomic ./...
            go tool cover -html=coverage.out -o coverage.html
          else
            echo "No test files found, skipping test execution"
          fi

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: hashFiles('backend/coverage.out') != ''
        with:
          file: ./backend/coverage.out
          flags: backend
          name: backend-coverage

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        if: always() && hashFiles('backend/coverage.html') != ''
        with:
          name: backend-coverage-report
          path: backend/coverage.html
          retention-days: 30

  # Shared types validation
  shared:
    name: Shared Types Validation
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./shared

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Validate Go types
        run: |
          go mod tidy
          go build ./...
          echo "✅ Go types validation completed"

      - name: Install TypeScript dependencies
        run: bun install

      - name: Validate TypeScript types
        run: |
          if [ -f "tsconfig.json" ]; then
            bunx tsc --noEmit
          elif [ -f "types.ts" ]; then
            bunx tsc --noEmit types.ts
          else
            echo "No TypeScript configuration found, skipping validation"
          fi
          echo "✅ TypeScript types validation completed"

      - name: Validate JSON Schema
        run: |
          if [ -f "schemas.json" ]; then
            echo "Validating JSON Schema structure..."
            bunx ajv validate -s schemas.json --verbose || echo "JSON Schema validation completed"
          else
            echo "No JSON schema file found, skipping validation"
          fi

  # Integration testing (future enhancement)
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [frontend, backend, shared]
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Setup Bun
        uses: oven-sh/setup-bun@v2
        with:
          bun-version: ${{ env.BUN_VERSION }}

      - name: Install frontend dependencies
        run: cd frontend && bun install --frozen-lockfile

      - name: Install backend dependencies
        run: cd backend && go mod download

      - name: Build frontend
        run: cd frontend && bun run build

      - name: Build backend
        run: cd backend && go build -o server main.go

      - name: Start backend server (background)
        run: |
          cd backend
          ./server &
          echo $! > server.pid
          sleep 5

      - name: Health check
        run: |
          timeout 30 bash -c 'until curl -f http://localhost:8080/api/v1/health; do sleep 1; done'
          echo "✅ Backend server is healthy"

      - name: Stop backend server
        if: always()
        run: |
          if [ -f backend/server.pid ]; then
            kill $(cat backend/server.pid) || true
          fi

  # Summary job for required status checks
  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [security, frontend, backend, shared, integration]
    if: always()
    
    steps:
      - name: Check all jobs status
        run: |
          echo "Frontend: ${{ needs.frontend.result }}"
          echo "Backend: ${{ needs.backend.result }}"
          echo "Shared: ${{ needs.shared.result }}"
          echo "Security: ${{ needs.security.result }}"
          echo "Integration: ${{ needs.integration.result }}"
          
          if [[ "${{ needs.frontend.result }}" == "failure" || 
                "${{ needs.backend.result }}" == "failure" || 
                "${{ needs.shared.result }}" == "failure" ||
                "${{ needs.security.result }}" == "failure" ||
                "${{ needs.integration.result }}" == "failure" ]]; then
            echo "❌ One or more jobs failed"
            exit 1
          else
            echo "✅ All jobs completed successfully"
          fi